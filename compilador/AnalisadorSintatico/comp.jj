PARSER_BEGIN(comp)
import java.util.ArrayList;
import java.util.List;

public class comp 
{
    private static Codigo c = new Codigo();
    
	public static void main( String[] args )throws ParseException
	{
		try
		{
			comp analizador = new comp( System.in ) ;
			analizador.Programa();
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Analizador: foram encontrados alguns erros na analise.");
		}
		for(String nome : c.codigoList){
            System.out.println(nome);
        }
	}
}

class Codigo
{
    public List<String> codigoList = new ArrayList<String>();
}
PARSER_END(comp)

SKIP : 
{ 
	" "|"\n"|"\r"|"\r\n" 
}


TOKEN:
{
	<#LETRA: (["a"-"z","A"-"Z"])>|
	<#DIGITO: (["0" - "9"])>|
	<#CARACTERE: (<LETRA>|<DIGITO>)>
}

TOKEN:
{
	<INT = "int">|
	<DOUBLE = "double">|
	<CHAR = "char">|
	<STRING = "string">|
	<BOOLEAN = "bool">
}

TOKEN:
{
	<TRUE = "True">|
	<FALSE = "False">
}

TOKEN:
{
	<PONTO = "."> |
	<NEG = "-">
}

TOKEN:
{
	<ENDL = "\n">|
	<EOL = ";">
}

TOKEN:
{
	<ABREVET = "[">|
	<FECHAVET = "]">
}

TOKEN:
{
	<ADD = "+">|
	<SUB = "-">|
	<MULT = "*">|
	<DIV = "/">|
	<MOD = "//">|
	<POW = "^">|
	<PORCE = "%">|
	<ABREPAR = "(">|
	<FECHAPAR = ")">
}

TOKEN:
{
	<IGUAL: "==">|
	<DIF: "=!">|
	<MAIOR: ">">|
	<MENOR: "<">|
	<MAIGUAL: "=>">|
	<MEIGUAL: "=<">|
	<IGUALDADE: "=">
}

TOKEN:
{
	<AND: "&&">|
	<OR: "||">|
	<NOT: "!">|
	<XOR: "|+">
}

TOKEN:
{
	<IF: "when">|
	<ELSE: "otherwise">
}

TOKEN:
{	
	<FOR: "for">|
	<WHILE: "while">|
	<FOREACH: "foreach">
}

TOKEN:
{
	<FIRST: "first">|
	<LAST: "last">|
	<BEGIN: "begin">|
	<END: "end">
}

TOKEN:
{
	<IMPORT: "import">|
	<GET: "get">|
	<WRITE: "write">
}

TOKEN:
{
    <IDENTIFICADOR: <LETRA>(<LETRA>|<DIGITO>|"_")*> {System.out.print("IDENTIFICADOR -> "+image+"\r\n");}
    |<IGUAL: ("==")>{System.out.println("IGUAL -> "+image);}|<COMENTARIO: "#"(<LETTER>|<DIGIT>)*"#">{System.out.print("COMENTARIO -> "+image+"\r\n");}
	
}

TOKEN:
{
	<STRING: """<CARACTERE>*""">|
	<INTEIRO: <NEG>?<DIGITO>+>|
	<CARACTER: "'"<CARACTERE>"'">|
	<PORCENTAGEM: (<REAL>|<INTEIRO>)<PORCE>>
}

TOKEN:
{
	<TIPOVARIAVEL: <INT>|<DOUBLE>|<CHAR>|<STRING>|<BOOLEAN>>|
	
}

void Programa() :
{}
{
	(((Importacao()|Comentario())*|Execucao())|Execucao())Comentario()*<EOF>
}
void Linhas():
{}
{	
    (Igualdade())*
}
void Igualdade() :
{
    Token a, igual, b;
}
{
    a=<IDENTIFICADOR> {
        c.codigoList.add("Token: "+tokenImage[a.kind]+" // Palavra: "+a.toString());
    }
    igual=<IGUAL> {
        c.codigoList.add("Token: "+tokenImage[igual.kind]+" // Palavra: "+igual.toString());
    }
    b=<IDENTIFICADOR> {
        c.codigoList.add("Token: "+tokenImage[b.kind]+" // Palavra: "+b.toString());
    }
}

void Comentario() :
{
    Token com;
}
{
    com=<COMENTARIO> {
        c.codigoList.add("Token: "+tokenImage[com.kind]+" // Palavra: "+com.toString());
    }
}

void Write(){
	Token w, ap, e, fp; 
}
{
	w=<WRITE> {
        c.codigoList.add("Token: "+tokenImage[w.kind]+" // Palavra: "+w.toString());
    }
    ap=<ABREPAR> {
        c.codigoList.add("Token: "+tokenImage[ap.kind]+" // Palavra: "+ap.toString());
    }
    e = <EXPRESSAO> {
        c.codigoList.add("Token: "+tokenImage[e.kind]+" // Palavra: "+e.toString());
    }
	fp = <FECHAPAR>{
        c.codigoList.add("Token: "+tokenImage[fp.kind]+" // Palavra: "+fp.toString());
    }
}

void NomeVariavel(){
	Token id, ac, e, fc;
}
{
	id=<IDENTIFICADOR> {
        c.codigoList.add("Token: "+tokenImage[id.kind]+" // Palavra: "+id.toString());
    }
    ac=<ABREVET> {
        c.codigoList.add("Token: "+tokenImage[ac.kind]+" // Palavra: "+ac.toString());
    }
    e=<EXPRESSAO> {
        c.codigoList.add("Token: "+tokenImage[e.kind]+" // Palavra: "+e.toString());
    }
	fc = <FECHAVET>{
        c.codigoList.add("Token: "+tokenImage[fc.kind]+" // Palavra: "+fc.toString());
    }

}

void Atribuicao(){
	Token i, r, e; 
}
{
	i = <IGUALDADE>{
		 c.codigoList.add("Token: "+tokenImage[i.kind]+" // Palavra: "+i.toString());
	}
	r = <READ>{
		 c.codigoList.add("Token: "+tokenImage[r.kind]+" // Palavra: "+r.toString());
	}
	e = <EXPRESSAO>{
		 c.codigoList.add("Token: "+tokenImage[e.kind]+" // Palavra: "+e.toString());
	}
	
}