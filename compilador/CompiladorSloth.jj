PARSER_BEGIN(CompiladorSloth)

public class CompiladorSloth
{
    private static Codigo cod = new Codigo(tokenImage);
    
	public static void main(String[] args) throws ParseException
	{
		try
		{
			System.out.println("\n--->  Sloth Compiler  <---\n");
			CompiladorSloth analizador = new CompiladorSloth(System.in) ;
			analizador.Programa();
			System.out.println("\n--- Compilado sem erros ---");
		}
		catch(ParseException e)
		{
			System.out.println("Analyzer: errors were found!");
			System.out.println(e.getMessage());
		}
		finally{
			cod.printTokens();
		}
	}
}
PARSER_END(CompiladorSloth)

SKIP:
{ 
	" "|"\n"|"\r"|"\r\n" 
}


TOKEN:
{
	<#LETRA: (["a"-"z","A"-"Z"])>
	|<#DIGITO: (["0" - "9"])>
	|<#CARACTERE: (<LETRA>|<DIGITO>)>
	|<#ASC: (["\0"-"!","$"-"&","("-"~"])> //tabela asc sem " ' #
}

TOKEN:
{
	<TIPOINT: "int">
	|<TIPODOUBLE: "double">
	|<TIPOCHAR: "char">
	|<TIPOSTRING: "string">
	|<TIPOBOOLEAN: "boolean">
	|<TIPOVOID: "void">
	|<RETORNO: "return">
}

TOKEN:
{
	<TRUE: "true">
	|<FALSE: "false">
}

TOKEN:
{
	<ENDL: "\\n">
	|<EOL: ";">
}

TOKEN:
{
	<ABREVET: "[">
	|<FECHAVET: "]">
}

TOKEN:
{
	<ADD: "+">
	|<SUB: "-">
	|<MULT: "*">
	|<MOD: "//">
	|<DIV: "/">
	|<POW: "^">
	|<PORCE: "%">
	|<ABREPAR: "(">
	|<FECHAPAR: ")">
	|<PONTO: ".">
}

TOKEN:
{
	<IGUAL: "==">
	|<DIF: "=!">
	|<MAIOR: ">">
	|<MENOR: "<">
	|<MAIGUAL: "=>">
	|<MEIGUAL: "=<">
	|<IGUALDADE: "=">
}

TOKEN:
{
	<AND: "&&">
	|<OR: "||">
	|<NOT: "!">
	|<XOR: "|+">
}

TOKEN:
{
	<IF: "when">
	|<ELSE: "otherwise">
}

TOKEN:
{	
	<FOR: "for">
	|<SEPFOR: ":">
	|<WHILE: "while">
	|<FOREACH: "foreach">
}

TOKEN:
{
	<FIRST: "first">
	|<LAST: "last">
	|<BEGIN: "begin">
	|<END: "end">
}

TOKEN:
{
	<IMPORT: "import">
	|<GET: "get">
	|<WRITE: "write">
	|<COMENT: "#"(<ASC>|"\""|"\'")*"#">
	|<SEPFUN: ",">
}

TOKEN:
{
	<NOMEVAR: <LETRA>(<CARACTERE>)*>
}

TOKEN:
{
	<STRING: "\""(<ASC>)*"\"">
	|<INTEIRO: (<DIGITO>)+>
	|<CARACTER: "'"<ASC>"'">
	|<REAL: <INTEIRO><PONTO><INTEIRO>>
	|<PORCENTAGEM: (<REAL>|<INTEIRO>)<PORCE>>
}

void Programa():
{Token a,b;} // (((Importacao()|<COMENT>)*Execucao())|Execucao())(<COMENT>)*<EOF>
{
	(Importacao()|(a=<COMENT>){cod.add(a);}|Funcao())*
	Execucao()
	((b=<COMENT>){cod.add(b);})*
	<EOF>
}

void Funcao():
{Token a=null,b;} // (<TIPOVOID>|TipoVar())NomeVar()<ABREPAR>[FuncPar()]<FECHAPAR>Bloco()
{
	((a=<TIPOVOID>){cod.add(a);}|a=TipoVar()){cod.setScope(a.kind);}
	DeclaraVar(a)
	(a=<ABREPAR>){cod.add(a);cod.openBloco();}
	[FuncPar()]
	(b=<FECHAPAR>){cod.add(b);}
	Bloco(){cod.closeBloco();}
}

void FuncPar():
{Token a, b;} // TipoVar()NomeVar()[<SEPFUN>FuncPar()]
{
	b=TipoVar()DeclaraVar(b)
	[(a=<SEPFUN>){cod.add(a);}
	FuncPar()]
}

void Retorno():
{Token a;} // <RETORNO>Expressao()
{
	(a=<RETORNO>){cod.add(a);
	cod.openExpressao(cod.getScope());}
	[Expressao()]{cod.closeExpressao();}
}

Token ChamaFuncao():
{Token a,b,exp;} // NomeVar()<ABREPAR>[ChamaFuncPar()]<FECHAPAR>
{
	(exp=NomeVar())
	(a=<ABREPAR>){cod.add(a);}
	[ChamaFuncPar()]
	(b=<FECHAPAR>){cod.add(b);
	return exp;}
}

void ChamaFuncPar():
{Token a;} // (NomeVar()|ValorVar())[<SEPFUN>FuncPar()]
{
	(NomeVar()|ValorVar())
	[(a=<SEPFUN>){cod.add(a);}
	ChamaFuncPar()]
}

void Importacao():
{Token a,b;} //<IMPORT><STRING>
{
	(a=<IMPORT>){cod.add(a);}
	(b=<STRING>){cod.add(b);}
}

void Execucao():
{Token a,b,c;} //<FIRST>(Linha())*<LAST>
{
	(a=<FIRST>){cod.add(a);
	cod.verificaFirst();
	cod.setScope(14);}
	(Linha()|(b=<COMENT>){cod.add(b);})*
	(c=<LAST>){cod.add(c);}
}

void Linha():
{Token a;} //((Write()|ManVar())<EOL>)|FluxoDados()
{
	((Write()|ManVar()|Retorno())(a=<EOL>){cod.add(a);})
	|FluxoDados()
}

void Write():
{Token a,b,c;} //<WRITE><ABREPAR>Expressao()<FECHAPAR>
{
	(a=<WRITE>){cod.add(a);}
	(b=<ABREPAR>){cod.add(b);
	cod.openExpressao(12);}
	Expressao(){cod.closeExpressao();}
	(c=<FECHAPAR>){cod.add(c);}		
}

void ManVar():
{Token a,b;} //(TipoVar()NomeVar()[Atribuicao()])|(NomeVar()Atribuicao())|(ChamaFuncao())
{
	(a=TipoVar()ManVarSeq(a))
	| ( LOOKAHEAD(3) (b=NomeVar()Atribuicao(cod.getVarType(b)))
	| ChamaFuncao())

}

void ManVarSeq(Token b):
{Token a;}
{
	DeclaraVar(b)
	[Atribuicao(b.kind)]
	[(a=<SEPFUN>){cod.add(a);}
	ManVarSeq(b)]
}

Token TipoVar():
{Token a=null;} // <TIPOBOOLEAN>|<TIPOCHAR>|<TIPODOUBLE>|<TIPOINT>|<TIPOSTRING>
{
	(a=<TIPOBOOLEAN>|a=<TIPOCHAR>|a=<TIPODOUBLE>|a=<TIPOINT>|a=<TIPOSTRING>)
	{
		cod.add(a);
		return a;
	}
}

void DeclaraVar(Token d):
{Token a,b,c;} 	// <NOMEVAR>[(<ABREVET>Expressao()<FECHAVET>)]
{
	(a=<NOMEVAR>){
		cod.add(a);
		cod.addDVarList(a.image, d.kind);
	}
	[((b=<ABREVET>){cod.add(b);
	cod.openExpressao(9);}
	Expressao(){cod.closeExpressao();}
	(c=<FECHAVET>){cod.add(c);})]
}


Token NomeVar():
{Token a,b,c;} 	// <NOMEVAR>[(<ABREVET>Expressao()<FECHAVET>)]
{
	((a=<NOMEVAR>){cod.verifyVarList(a);
	cod.add(a);}
	[((b=<ABREVET>){cod.add(b);
	cod.openExpressao(9);}
	Expressao(){cod.closeExpressao();}
	(c=<FECHAVET>){cod.add(c);})])
	{return a;}
}

void Atribuicao(int kind):
{Token a;} // <IGUALDADE>(Read()|Expressao())
{
	(a=<IGUALDADE>){cod.add(a);cod.openExpressao(kind);}(Read()|Expressao()){cod.closeExpressao();}
}

void Read():
{Token a,b,c;} // <GET><ABREPAR><FECHAPAR>
{
	(a=<GET>) {cod.add(a);cod.addToExp(a);}
	(b=<ABREPAR>) {cod.add(b);}
	(c=<FECHAPAR>) {cod.add(c);}
}

void Expressao():
{Token a,b,c,exp;} /*
((<ABREPAR>(Expressao())+<FECHAPAR>)
| <NOT>Expressao()
| ValorVar()
| ChamaFuncao()
| NomeVar())
[LOOKAHEAD(2) Operador()Expressao()]
*/
{
	(((a=<ABREPAR>){cod.add(a);cod.openParExp(a);}
	(Expressao())+
	(b=<FECHAPAR>){cod.add(b);cod.closeParExp(b);})
	| (c=<NOT>){cod.add(c);cod.addOpToExp(c);}
	Expressao()
	| (exp=ValorVar()){cod.addToExp(exp);}
	| ( LOOKAHEAD(3) (exp=ChamaFuncao()){cod.addToExp(exp);}
	| (exp=NomeVar())){cod.addToExp(exp);})
	[LOOKAHEAD(2) Operador()Expressao()]
}

void Operador():
{Token a=null;} // OpArit()|OpRelac()
{
	((a=OpArit())|(a=OpRelac()))
	{cod.addOpToExp(a);}
}

Token OpArit():
{Token a;} // <ADD>|<SUB>|<MOD>|<DIV>|<POW>|<MULT>
{
	((a = <ADD>){cod.add(a);}|
	(a = <SUB>){cod.add(a);}|
	(a = <MOD>){cod.add(a);}|
	(a = <DIV>){cod.add(a);}|
	(a = <POW>){cod.add(a);}|
	(a = <MULT>){cod.add(a);})
	{return a;}
}

Token OpRelac():
{Token a;} // <AND>|<OR>|<XOR>|<IGUAL>|<DIF>|<MAIGUAL>|<MEIGUAL>|<MAIOR>|<MENOR>
{
	((a=<AND>){cod.add(a);}
	|(a=<OR>){cod.add(a);}
	|(a=<XOR>){cod.add(a);}
	|(a=<IGUAL>){cod.add(a);}
	|(a=<DIF>){cod.add(a);}
	|(a=<MAIGUAL>){cod.add(a);}
	|(a=<MEIGUAL>){cod.add(a);}
	|(a=<MAIOR>){cod.add(a);}
	|(a=<MENOR>){cod.add(a);})
	{return a;}
	
}

Token ValorVar():
{Token a;} // <INTEIRO>|<REAL>|<CARACTER>|Booleano()|<PORCENTAGEM>|<STRING>
{
	((a=<INTEIRO>){cod.add(a);}
	|(a=<REAL>){cod.add(a);}
	|(a=<CARACTER>){cod.add(a);}
	|(a=Booleano())
	|(a=<PORCENTAGEM>){cod.add(a);}
	|(a=<STRING>){cod.add(a);})
	{return a;}
}

Token Booleano():
{Token a;} // <TRUE>|<FALSE>
{
	((a = <TRUE>){cod.add(a);}|
	(a = <FALSE>){cod.add(a);})
	{return a;}
}

void FluxoDados():
{} // While()|For()|Foreach()|If()
{
	{cod.openBloco();}
	(While()|For()|Foreach()|If())
	{cod.closeBloco();}
}

void While():
{Token a,b,c;} // <WHILE><ABREPAR>Expressao()<FECHAPAR>Bloco()
{
	(a=<WHILE>){cod.add(a);}
	(b=<ABREPAR>){cod.add(b);
	cod.openExpressao(13);}
	Expressao(){cod.closeExpressao();}
	(c=<FECHAPAR>){cod.add(c);}
	Bloco()
}

void For():
{Token a,b,c,d,e,f;}/*
<FOR><ABREPAR>NomeVar()<IGUALDADE>
(ValorVar()|NomeVar())<SEPFOR>
(ValorVar()|NomeVar())<SEPFOR>
(ValorVar()|NomeVar())<FECHAPAR>Bloco()
*/
{
	(a=<FOR>){cod.add(a);}
	(b=<ABREPAR>){cod.add(b);}
	((f=TipoVar()DeclaraVar(f))|NomeVar())
	(c=<IGUALDADE>){cod.add(c);}
	(ValorVar()|NomeVar())
	(d=<SEPFOR>){cod.add(d);}
	(ValorVar()|NomeVar())
	(d=<SEPFOR>){cod.add(d);}
	(ValorVar()|NomeVar())
	(e = <FECHAPAR>){cod.add(e);}
	Bloco()
}

void Foreach():
{Token a,b,c,d;} // <FOREACH><ABREPAR>NomeVar()<SEPFOR>NomeVar()<FECHAPAR>Bloco()
{
	(a=<FOREACH>){cod.add(a);}
	(b=<ABREPAR>){cod.add(b);}
	NomeVar()
	(c=<SEPFOR>){cod.add(c);}
	NomeVar()
	(d=<FECHAPAR>){cod.add(d);}
	Bloco()
}

void If():
{Token a,b,c,d;} // <IF><ABREPAR>Expressao()<FECHAPAR>Bloco()[<ELSE>Bloco()]
{
	(a=<IF>){cod.add(a);}
	(b=<ABREPAR>){cod.add(b);
	cod.openExpressao(13);}
	Expressao(){cod.closeExpressao();}
	(c = <FECHAPAR>){cod.add(c);}
	Bloco()
	[(d = <ELSE>){cod.add(d);}Bloco()]
}

void Bloco():
{Token a,b,c;} //<BEGIN>(Linha()|<COMENT>)*<END>
{
	(a=<BEGIN>){cod.add(a);}
	(Linha()|(b=<COMENT>){cod.add(b);})*
	(c=<END>){cod.add(c);}
}
