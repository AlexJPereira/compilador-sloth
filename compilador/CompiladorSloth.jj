PARSER_BEGIN(CompiladorSloth)
import java.util.ArrayList;
import java.util.List;

public class CompiladorSloth
{
    private static Codigo c = new Codigo();
    
	public static void main(String[] args) throws ParseException
	{
		try
		{
			CompiladorSloth analizador = new CompiladorSloth(System.in) ;
			analizador.Test();
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Analizador: foram encontrados alguns erros na analise.");
		}
		for(String nome : c.codigoList){
            System.out.println(nome);
        }
	}
}

class Codigo
{
    public List<String> codigoList = new ArrayList<String>();
}
PARSER_END(CompiladorSloth)

SKIP : 
{ 
	" "|"\n"|"\r"|"\r\n" 
}


TOKEN:
{
	<#LETRA: (["a"-"z","A"-"Z"])>
	|<#DIGITO: (["0" - "9"])>
	|<#CARACTERE: (<LETRA>|<DIGITO>)>
}

TOKEN:
{
	<TIPOINT: "int">
	|<TIPODOUBLE: "double">
	|<TIPOCHAR: "char">
	|<TIPOSTRING: "string">
	|<TIPOBOOLEAN: "boolean">
}

TOKEN:
{
	<TRUE: "true">
	|<FALSE: "false">
}

TOKEN:
{
	<PONTO: ".">
	|<NEG: "-">
}

TOKEN:
{
	<ENDL: "\n">
	|<EOL: ";">
}

TOKEN:
{
	<ABREVET: "[">
	|<FECHAVET: "]">
}

TOKEN:
{
	<ADD: "+">
	|<SUB: "-">
	|<MULT: "*">
	|<DIV: "/">
	|<MOD: "//">
	|<POW: "^">
	|<PORCE: "%">
	|<ABREPAR: "(">
	|<FECHAPAR: ")">
}

TOKEN:
{
	<IGUAL: "==">
	|<DIF: "=!">
	|<MAIOR: ">">
	|<MENOR: "<">
	|<MAIGUAL: "=>">
	|<MEIGUAL: "=<">
	|<IGUALDADE: "=">
}

TOKEN:
{
	<AND: "&&">
	|<OR: "||">
	|<NOT: "!">
	|<XOR: "|+">
}

TOKEN:
{
	<IF: "when">
	|<ELSE: "otherwise">
}

TOKEN:
{	
	<FOR: "for">
	|<WHILE: "while">
	|<FOREACH: "foreach">
}

TOKEN:
{
	<FIRST: "first">
	|<LAST: "last">
	|<BEGIN: "begin">
	|<END: "end">
}

TOKEN:
{
	<IMPORT: "import">
	|<GET: "get">
	|<WRITE: "write">
}

TOKEN:
{
	<STRING: "\""(<CARACTERE>)*"\"">
	|<INTEIRO: (<DIGITO>)+>
	|<CARACTER: "'"<CARACTERE>"'">
	|<PORCENTAGEM: (<REAL>|<INTEIRO>)<PORCE>>
}

void Test():
{}
{
	<STRING>
	<INTEIRO>
	<CARACTER>
	<PORCENTAGEM>
}


void Expressao():
{}
{
	((<ABREPAR>(Expressao())+<FECHAPAR>)
    | <NOT>Expressao()
	| <NOMEDEVARIAVEL>
	| <VALORDEVARIAVEL>)
	[<OPERADOR>Expressao()]
}